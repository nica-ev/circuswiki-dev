# Task ID: 1
# Title: Set up project structure and dependencies
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create the initial project structure for the translation tool within the 'translation-py' directory, define required dependencies, and set up configuration file templates.
# Details:
Create a Python project structure within a 'translation-py' folder. Add requirements.txt with dependencies: python-dotenv, ruamel.yaml, markdown-it-py, requests/httpx, hashlib, pathlib. Create template files for settings.txt and translate.env. Set up basic CLI entry point with argparse.

# Test Strategy:
Verify project structure is correct within 'translation-py'. Ensure all dependencies can be installed with pip. Confirm template files are created with appropriate placeholders.

# Subtasks:
## 1. Create basic project directory structure within translation-py [pending]
### Dependencies: None
### Description: Set up the initial directory structure for the Python project following standard practices within the 'translation-py' folder.
### Details:
Create the following directory structure inside the 'translation-py' folder:
- translation-py/
  - src/
    - __init__.py
  - tests/
    - __init__.py
  - docs/
  - config/
  - README.md
  - requirements.txt
  - .gitignore

Ensure the .gitignore includes standard Python patterns (pycache, virtual environments, etc.). Create empty __init__.py files in appropriate directories to make them proper Python packages. Ensure this structure is created relative to the main project root.

## 2. Define project dependencies and create requirements.txt [pending]
### Dependencies: 1.1
### Description: Create a requirements.txt file with all necessary dependencies for the project within the 'translation-py' directory.
### Details:
Create a requirements.txt file inside the 'translation-py' directory with the following dependencies:

python-dotenv>=1.0.0
ruamel.yaml>=0.17.21
markdown-it-py>=2.2.0
httpx>=0.24.0
requests>=2.28.2
hashlib
pathlib

Specify minimum versions for each dependency to ensure compatibility. Include comments explaining what each dependency is used for. Consider separating dev dependencies (like testing libraries) into a requirements-dev.txt file within 'translation-py'.

## 3. Create configuration file templates [pending]
### Dependencies: 1.1
### Description: Set up template files for settings.txt and translate.env within the 'translation-py/config' directory.
### Details:
In the 'translation-py/config/' directory, create:

1. settings.txt template with placeholders for common configuration options:
```ini
# Application Settings
INPUT_DIR=../docs # Default relative to translation-py
OUTPUT_DIR=../translated_docs # Default relative to translation-py
TARGET_LANGUAGES=DE,FR,ES
YAML_TRANSLATE_FIELDS=title,description
API_PROVIDER=DeepL
TEST_MODE=false
# Add other configuration parameters with default values and comments
```

2. translate.env template for environment variables:
```
# API Keys
DEEPL_API_KEY=your_api_key_here
# Other keys...
```

Include comments explaining each configuration option and how to set them. Ensure the default paths consider the location within 'translation-py'.

## 4. Set up CLI entry point structure [pending]
### Dependencies: 1.1
### Description: Create the main CLI entry point file within 'translation-py/src'.
### Details:
Create a file named 'translation-py/src/cli.py' with the following structure:

```python
#!/usr/bin/env python3
import argparse
import sys

def parse_args():
    parser = argparse.ArgumentParser(description='Markdown Content Translator Tool')
    
    # Add common arguments
    parser.add_argument('-s', '--settings', default='../config/settings.txt', help='Path to settings file (relative to script location)')
    parser.add_argument('-e', '--env', default='../config/translate.env', help='Path to environment file (relative to script location)')
    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose output')
    
    # Add subparsers if needed for different commands later
    # subparsers = parser.add_subparsers(dest='command', help='Commands')
    
    return parser.parse_args()

def main():
    args = parse_args()
    # Main application logic will go here
    print(f"Arguments: {args}")
    # TODO: Load config using args.settings and args.env
    
if __name__ == "__main__":
    sys.exit(main())
```

Make the file executable with appropriate permissions. Adjust default config/env paths to be relative to the script's expected location within 'translation-py/src'.

## 5. Create package entry point and setup.py [pending]
### Dependencies: 1.1, 1.2, 1.4
### Description: Set up the main package entry point and create setup.py for installation within the 'translation-py' directory.
### Details:
1. Create a '__main__.py' file in the 'translation-py/src' directory:
```python
from .cli import main

if __name__ == "__main__":
    main()
```

2. Create 'setup.py' in the 'translation-py' directory:
```python
from setuptools import setup, find_packages

with open("README.md", "r", encoding="utf-8") as fh:
    long_description = fh.read()

with open("requirements.txt", "r", encoding="utf-8") as fh:
    requirements = fh.read().splitlines()

setup(
    name="markdown_translator",
    version="0.1.0",
    author="Your Name / Project Team",
    author_email="your.email@example.com",
    description="Tool to translate Markdown files using LLM APIs",
    long_description=long_description,
    long_description_content_type="text/markdown",
    # url="URL to project repo subsection if applicable",
    package_dir={'': 'src'},
    packages=find_packages(where='src'),
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: MIT License", # Choose appropriate license
        "Operating System :: OS Independent",
    ],
    python_requires=">=3.8",
    install_requires=requirements,
    entry_points={
        "console_scripts": [
            "mdtranslate=src.cli:main",
        ],
    },
)
```

Update the package name, author details, and entry point command name. Ensure `package_dir` and `find_packages` point correctly to the `src` directory within `translation-py`.

