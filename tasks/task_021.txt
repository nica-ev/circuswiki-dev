# Task ID: 21
# Title: Implement Robust HTML Parsing and Reassembly in MarkdownProcessor
# Status: done
# Dependencies: 7
# Priority: medium
# Description: Enhance the MarkdownProcessor to properly parse HTML content within Markdown documents, extract text from allowed HTML tags, and correctly reassemble translated content while preserving structure.
# Details:
Implement a robust HTML parsing and reassembly system in the MarkdownProcessor class with the following components:

1. HTML Parser Integration:
   - Integrate a reliable HTML parsing library (BeautifulSoup or html.parser) to identify and extract HTML blocks within Markdown content
   - Create a configurable HTML tag whitelist system that specifies which tags and attributes should be processed
   - Implement proper handling of nested HTML structures

2. Text Extraction Strategy:
   - Develop a configurable strategy to extract text content from specific allowed HTML tags (e.g., <p>, <h1>-<h6>, <li>, <td>, <th>)
   - Extract text from relevant attributes of specific tags (e.g., alt from <img>, title from <a>)
   - Preserve the original HTML structure, including all attributes and non-text content
   - Handle special cases like HTML entities and CDATA sections correctly

3. HTML Reassembly:
   - Create a system to correctly reintegrate translated text back into the original HTML structure
   - Ensure all original attributes, tag hierarchies, and non-translatable elements remain intact
   - Implement proper escaping to prevent HTML injection or malformation
   - Maintain original whitespace and formatting where appropriate

4. Configuration System:
   - Create a configuration interface that allows users to specify:
     * Which HTML tags should have their text content extracted for translation
     * Which attributes of which tags should be extracted for translation
     * Any tags that should be completely ignored/preserved as-is

5. Error Handling:
   - Implement robust error handling for malformed HTML
   - Add detailed logging for parsing and reassembly operations
   - Ensure the system degrades gracefully when encountering unexpected HTML structures

# Test Strategy:
1. Unit Tests:
   - Test HTML parsing with various HTML structures (simple tags, nested tags, self-closing tags)
   - Test extraction of text from different allowed tags and attributes
   - Test reassembly with different complexity levels of HTML
   - Test handling of malformed HTML input
   - Test with HTML entities and special characters

2. Integration Tests:
   - Test the complete workflow from Markdown with embedded HTML through parsing, extraction, translation, and reassembly
   - Verify that the original structure is preserved after processing
   - Test with real-world examples of Markdown documents containing HTML

3. Edge Cases:
   - Test with extremely large HTML blocks
   - Test with uncommon but valid HTML structures
   - Test with HTML containing mixed language content
   - Test with HTML containing code samples or other non-translatable content

4. Validation Methods:
   - Compare the DOM structure before and after processing to ensure they match
   - Verify all attributes are preserved exactly as in the original
   - Confirm that only the text content from allowed tags/attributes is modified
   - Use HTML validators to ensure the output remains valid HTML

5. Performance Testing:
   - Measure and establish performance benchmarks for processing documents with varying amounts of HTML content
   - Ensure memory usage remains reasonable with large documents

# Subtasks:
## 1. Integrate Beautiful Soup for HTML Parsing in MarkdownProcessor [done]
### Dependencies: None
### Description: Add Beautiful Soup library to the project and implement core HTML parsing functionality within the MarkdownProcessor class to identify and extract HTML blocks from Markdown content.
### Details:
Implementation steps:
1. Add Beautiful Soup as a project dependency
2. Create a new method `_parse_html(html_content)` in MarkdownProcessor that uses Beautiful Soup to parse HTML strings
3. Implement a method to identify HTML blocks within Markdown content using regex patterns
4. Create a method to extract HTML blocks from Markdown for separate processing
5. Implement unit tests for HTML block identification and extraction

Testing approach:
- Create test cases with various HTML blocks embedded in Markdown
- Verify correct identification and extraction of HTML content
- Test edge cases like HTML comments, script tags, and malformed HTML

<info added on 2025-05-04T20:33:27.480Z>
Here's additional information for the subtask:

```python
# Implementation details:

## Beautiful Soup Integration
- Add to requirements.txt: `beautifulsoup4>=4.12.2` and `lxml>=4.9.3` (as the HTML parser backend)
- Import in MarkdownProcessor: `from bs4 import BeautifulSoup`

## HTML Processing Methods
def _parse_html(self, html_content):
    """
    Parse HTML content using Beautiful Soup.
    
    Args:
        html_content (str): Raw HTML string
        
    Returns:
        BeautifulSoup: Parsed HTML object
    """
    return BeautifulSoup(html_content, 'lxml')

def _identify_html_blocks(self, markdown_content):
    """
    Use regex patterns to identify HTML blocks:
    - HTML blocks starting with opening tags like <div>, <table>, etc.
    - HTML blocks with proper closing tags
    - Self-closing tags
    
    Regex pattern example: r'<([a-z][a-z0-9]*)\b[^>]*>(.*?)</\1>'
    """

## Integration with markdown-it-py
- Use the renderer extension mechanism of markdown-it-py
- Register custom token handlers for 'html_block' and 'html_inline' token types
- Example hook: `md.add_render_rule('html_block', self._handle_html_block)`

## Error handling
- Implement try/except blocks around BeautifulSoup parsing
- Add fallback rendering for malformed HTML
- Log parsing errors with context information
```
</info added on 2025-05-04T20:33:27.480Z>

## 2. Implement Configurable HTML Tag and Attribute Whitelist System [done]
### Dependencies: 21.1
### Description: Create a configuration system that allows users to specify which HTML tags and attributes should be processed for translation, preserved as-is, or ignored completely.
### Details:
Implementation steps:
1. Define a default configuration dictionary with whitelisted tags and attributes
2. Create a `HTMLProcessingConfig` class to manage HTML processing rules
3. Implement methods to add/remove tags and attributes from whitelist
4. Add configuration loading from external JSON/YAML files
5. Integrate configuration with the MarkdownProcessor class

Testing approach:
- Test default configuration behavior
- Verify custom configuration loading
- Test tag and attribute filtering based on configuration
- Ensure configuration changes are properly applied to processing

## 3. Develop Text Extraction Strategy for HTML Content [done]
### Dependencies: 21.1, 21.2
### Description: Create a system to extract translatable text from HTML tags and attributes based on the whitelist configuration while preserving the original HTML structure.
### Details:
Implementation steps:
1. Implement a `_extract_text_from_html(soup, config)` method that traverses the Beautiful Soup parse tree
2. Extract text content from whitelisted tags while preserving their positions
3. Extract text from specified attributes (e.g., alt, title) based on configuration
4. Create a data structure to track the original positions of extracted text
5. Handle special cases like HTML entities and CDATA sections

Testing approach:
- Test extraction from various HTML structures
- Verify correct handling of nested tags
- Test attribute text extraction
- Ensure HTML entities are properly handled
- Validate position tracking for reassembly

## 4. Implement HTML Reassembly with Translated Content [done]
### Dependencies: 21.3
### Description: Create a system to reintegrate translated text back into the original HTML structure while preserving all attributes, tag hierarchies, and non-translatable elements.
### Details:
Implementation steps:
1. Implement a `_reassemble_html(original_soup, translated_texts, positions)` method
2. Create a mechanism to replace text nodes in the Beautiful Soup tree with translated content
3. Implement attribute value replacement for translated attribute content
4. Add proper escaping to prevent HTML injection
5. Ensure whitespace and formatting preservation

Testing approach:
- Test reassembly with various HTML structures
- Verify attribute values are correctly updated
- Test with special characters and HTML entities
- Ensure tag hierarchy and structure is preserved
- Validate proper escaping of translated content

## 5. Add Error Handling and Integration with Markdown Processing [done]
### Dependencies: 21.1, 21.2, 21.3, 21.4
### Description: Implement robust error handling for HTML parsing and integrate the HTML processing system with the existing Markdown translation workflow.
### Details:
Implementation steps:
1. Implement try-except blocks around HTML parsing operations
2. Add detailed logging for parsing and reassembly operations
3. Create fallback mechanisms for handling malformed HTML
4. Integrate HTML processing into the main Markdown translation workflow
5. Update the MarkdownProcessor.process() method to handle HTML blocks

Testing approach:
- Test with malformed HTML to verify graceful degradation
- Verify logging of parsing errors
- Test end-to-end Markdown processing with embedded HTML
- Ensure correct integration with existing Markdown translation
- Validate performance with large documents containing HTML

