# Task ID: 12
# Title: Implement source file hash update
# Status: done
# Dependencies: 5, 11
# Priority: high
# Description: Create functionality to update content_hash and yaml_hash in source files after processing.
# Details:
Extend FileManager to update the content_hash and yaml_hash values in source file frontmatter after successful processing. Implement careful file writing to avoid data loss. Include error handling for file write failures.

# Test Strategy:
Process test files and verify source files are updated with new hash values. Modify content, process again, and confirm hashes are updated. Test error handling by simulating write failures.

# Subtasks:
## 1. Extend FileManager with hash update method [done]
### Dependencies: None
### Description: Add a new method to the FileManager class that will handle updating content_hash and yaml_hash in source file frontmatter
### Details:
Create a new method in FileManager called updateFileHashes(filePath, contentHash, yamlHash) that will be responsible for updating the hash values in a file's frontmatter. This method should accept the file path and the new hash values as parameters. Define the method signature and structure with appropriate documentation, but leave the implementation empty for now.

## 2. Implement frontmatter parsing and modification [done]
### Dependencies: 12.1
### Description: Create functionality to parse existing frontmatter, update hash values, and prepare the modified content
### Details:
Implement the core logic of the updateFileHashes method to: 1) Read the file content, 2) Parse the YAML frontmatter section, 3) Update the content_hash and yaml_hash values with the new values, 4) Reconstruct the file content with the updated frontmatter. Use existing YAML parsing libraries to handle the frontmatter. Ensure the formatting of the frontmatter is preserved as much as possible.

## 3. Implement safe file writing mechanism [done]
### Dependencies: 12.2
### Description: Create a safe file writing process that prevents data loss during updates
### Details:
Enhance the updateFileHashes method with a safe file writing mechanism that: 1) Creates a temporary backup of the original file, 2) Writes the modified content to a temporary file, 3) Verifies the write was successful, 4) Replaces the original file with the temporary file using atomic operations when possible. This approach ensures that if any part of the process fails, the original file remains intact.

## 4. Add comprehensive error handling [done]
### Dependencies: 12.3
### Description: Implement error handling for all potential failure points in the hash update process
### Details:
Complete the updateFileHashes method by adding comprehensive error handling for: 1) File read errors, 2) YAML parsing errors, 3) File write errors, 4) File replacement errors. Each error case should be properly logged with meaningful error messages. The method should clean up any temporary files created during the process, even if an error occurs. Return appropriate success/failure status that can be used by calling code to determine if the update was successful.

