/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  SiteswapPlugin: () => SiteswapPlugin,
  default: () => main_default
});
var import_obsidian2 = __toModule(require("obsidian"));

// settings.ts
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  width: 200,
  height: 225,
  scale: 0.5,
  fps: 33,
  stereo: false,
  slowdown: 2,
  camangle: "",
  showground: "auto",
  hidejugglers: ""
};
function stripNonNumerals(x) {
  return x.replaceAll(/\D/g, "");
}
var SiteswapSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.appendChild(createFragment((frag) => {
      frag.createEl("h2", { text: "Siteswap Settings" });
      frag.createEl("p", "????", (p) => {
        p.appendText("Detailed documentation can be found at ");
        p.createEl("a", {
          text: "jugglinglab.org/html/animinfo.html",
          href: "https://jugglinglab.org/html/animinfo.html"
        });
        p.appendText(`.`);
      });
      frag.createEl("p", {
        text: `These settings apply to all generated siteswap 
					animations, but can be overridden by specifying these parameters in the pattern 
					configuration.`
      });
      frag.createEl("p", {
        text: `Note that existing animations won't update automatically after updating settings. 
			Turning the plugin off and on again is the easiest way to update everything.`
      });
    }));
    new import_obsidian.Setting(containerEl).setName("width").setDesc("Width of the animation, in pixels.").addText((widget) => widget.setValue("" + this.plugin.settings.width).onChange((value) => __async(this, null, function* () {
      value = stripNonNumerals(value);
      widget.setValue(value);
      this.plugin.settings.width = parseInt(value);
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("height").setDesc("Height of the animation, in pixels.").addText((widget) => widget.setValue("" + this.plugin.settings.height).onChange((value) => __async(this, null, function* () {
      value = stripNonNumerals(value);
      widget.setValue(value);
      this.plugin.settings.height = parseInt(value);
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("scale").setDesc("Scaling factor for the generated GIF. 1.0 performs no scaling.").addText((widget) => widget.setValue("" + this.plugin.settings.scale).onChange((value) => __async(this, null, function* () {
      value = stripNonNumerals(value);
      widget.setValue(value);
      this.plugin.settings.scale = parseInt(value);
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("fps").setDesc("Number of frames per second in the generated GIF.").addText((widget) => widget.setValue("" + this.plugin.settings.fps).onChange((value) => __async(this, null, function* () {
      value = stripNonNumerals(value);
      widget.setValue(value);
      this.plugin.settings.fps = parseInt(value);
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("slowdown").setDesc("Defines an overall time slowdown factor (e.g., slowdown: 1.0 is actual speed, slowdown: 2.0 is half actual speed).").addText((widget) => widget.setValue("" + this.plugin.settings.slowdown).onChange((value) => __async(this, null, function* () {
      value = stripNonNumerals(value);
      widget.setValue(value);
      this.plugin.settings.slowdown = parseInt(value);
      yield this.plugin.saveSettings();
    })));
    const showGroundOptions = {
      true: "true",
      false: "false",
      auto: "auto"
    };
    new import_obsidian.Setting(containerEl).setName("showground").setDesc("Whether to display the ground.").addDropdown((dropdown) => dropdown.addOptions(showGroundOptions).setValue(this.plugin.settings.showground).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.showground = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("camangle").setDesc("Camera angles in degrees, given as one or a pair of angles. Example: camangle: (0,90). The first angle describes rotation of the camera around the juggler, and the second angle is the elevation angle given as degrees from directly overhead (i.e., 90 puts the camera on the same level as the juggler). Default value depends on the pattern.").addText((text) => text.setPlaceholder("(0,90)").setValue(this.plugin.settings.camangle).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.camangle = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("hidejugglers").setDesc("List of one or more jugglers to hide (i.e., not render) during animation. Examples: hidejugglers=1 or hidejugglers=(1,3).").addText((text) => text.setPlaceholder("(1,3)").setValue(this.plugin.settings.hidejugglers).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.hidejugglers = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("stereo").setDesc("Whether to display the pattern as a cross-eyed stereogram.").addToggle((toggle) => toggle.setValue(this.plugin.settings.stereo).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.stereo = value;
      yield this.plugin.saveSettings();
    })));
  }
};

// main.ts
var defaultSettingsObject = Object.assign({}, DEFAULT_SETTINGS);
function expandBuiltInHandString(hands) {
  if (hands == void 0) {
    return void 0;
  }
  const BUILT_IN_HAND_STRINGS = new Map(Object.entries({
    inside: "(10)(32.5).",
    outside: "(32.5)(10).",
    half: "(32.5)(10).(10)(32.5).",
    mills: "(-25)(2.5).(25)(-2.5).(-25)(0)."
  }));
  return BUILT_IN_HAND_STRINGS.get(hands.toLowerCase()) || hands;
}
var _SiteswapPlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      console.log("loading siteswap plugin");
      this.registerMarkdownCodeBlockProcessor("siteswap", _SiteswapPlugin.postprocessor(this.settings));
      this.addSettingTab(new SiteswapSettingTab(this.app, this));
    });
  }
  onunload() {
    console.log("unloading siteswap plugin");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var SiteswapPlugin = _SiteswapPlugin;
SiteswapPlugin.postprocessor = (settings) => {
  return (source, el, ctx) => {
    let failure = null;
    let yaml = null;
    try {
      yaml = (0, import_obsidian2.parseYaml)(source.replaceAll(":", ": "));
    } catch (e) {
      failure = e.message;
    }
    if (failure != null) {
    } else if (typeof yaml == "object") {
      if (!("pattern" in yaml)) {
        failure = 'Invalid siteswap: the "pattern" attribute is required.';
      }
    } else if (typeof yaml == "number" || typeof yaml == "string") {
      yaml = {
        pattern: "" + yaml
      };
    } else {
      failure = "Invalid siteswap.";
    }
    if (failure !== null) {
      const message = document.createElement("p");
      message.textContent = failure;
      message.style.color = "var(--text-error)";
      el.appendChild(message);
      return;
    }
    const paramsObject = __spreadValues(__spreadValues({ redirect: true }, settings), yaml);
    const displayWidth = paramsObject.width;
    paramsObject.width = paramsObject.width / paramsObject.scale;
    paramsObject.height = paramsObject.height / paramsObject.scale;
    paramsObject.hands = expandBuiltInHandString(paramsObject.hands);
    for (const key in paramsObject) {
      if (key == "width" && paramsObject[key] == 400) {
        delete paramsObject["width"];
      } else if (key == "height" && paramsObject[key] == 450) {
        delete paramsObject["height"];
      } else {
        if (defaultSettingsObject[key] == paramsObject[key]) {
          delete paramsObject[key];
        }
      }
    }
    delete paramsObject.scale;
    const params = Object.keys(paramsObject).map((key) => encodeURIComponent(key) + "=" + encodeURIComponent(paramsObject[key])).join(";");
    const img = document.createElement("img");
    img.src = "https://jugglinglab.org/anim?" + params;
    img.style.width = displayWidth + "px";
    el.appendChild(img);
  };
};
var main_default = SiteswapPlugin;

/* nosourcemap */